{
  "_from": "save",
  "_id": "save@2.9.0",
  "_inBundle": false,
  "_integrity": "sha512-eg8+g8CjvehE/2C6EbLdtK1pINVD27pcJLj4M9PjWWhoeha/y5bWf4dp/0RF+OzbKTcG1bae9qi3PAqiR8CJTg==",
  "_location": "/save",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "save",
    "fetchSpec": "latest",
    "name": "save",
    "raw": "save",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/save/-/save-2.9.0.tgz",
  "_shasum": "6659375fadeaf58e4abc6a90ec6b0fb2e2232e0f",
  "_spec": "save",
  "_where": "/home/livquik/Desktop/karate_demo/myproject/src/jwt",
  "author": {
    "email": "paul@serby.net",
    "name": "Paul Serby"
  },
  "bugs": {
    "url": "https://github.com/serby/save/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "async": "^3.2.2",
    "event-stream": "^4.0.1",
    "lodash.assign": "^4.2.0",
    "mingo": "^6.1.0"
  },
  "deprecated": false,
  "description": "A simple CRUD based persistence abstraction for storing objects to any backend data store. eg. Memory, MongoDB, Redis, CouchDB, Postgres, Punch Card etc.",
  "devDependencies": {
    "eslint": "^6.1.0",
    "eslint-config-prettier": "^6.0.0",
    "eslint-config-prettier-standard": "^3.0.1",
    "eslint-config-standard": "^13.0.1",
    "eslint-plugin-import": "^2.18.2",
    "eslint-plugin-node": "^9.1.0",
    "eslint-plugin-prettier": "^3.1.0",
    "eslint-plugin-promise": "^4.2.1",
    "eslint-plugin-standard": "^4.0.0",
    "lodash": "^4.17.21",
    "mocha": "^9.2.2",
    "nyc": "^14.1.1",
    "prettier": "^1.18.2",
    "should": "^13.2.3",
    "stream-assert": "^2.0.3"
  },
  "engine": ">=6",
  "homepage": "https://github.com/serby/save#readme",
  "license": "ISC",
  "main": "lib/save",
  "name": "save",
  "optionalDependencies": {},
  "publishConfig": {
    "registry": "http://registry.npmjs.org"
  },
  "readme": "# save - A simple CRUD based persistence abstraction for storing objects to any backend data store. eg. Memory, MongoDB, Redis, CouchDB, Postgres, Punch Card etc.\n\n[![NPM Details](https://nodei.co/npm/save.png?stars&downloads)](https://npmjs.org/package/save)\n\n[![build status](https://api.travis-ci.org/serby/save.png)](http://travis-ci.org/serby/save) [![Dependences](https://david-dm.org/serby/save.svg)](https://david-dm.org/serby/save/) [![Join the chat at https://gitter.im/serby/save](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/serby/save?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n**save** comes with a fully featured in memory engine which is super handy for testing your models.\nFor real world use you'll need to get one of the database powered engines:\n\n* [MongoDB](https://github.com/serby/save-mongodb)\n\nIf your data store of choice isn't listed here please create an engine and send me a pull request.\nTo see an example of how to create an engine, please see [save-mongodb](https://github.com/serby/save-mongodb).\n\n## Installation\n\n    npm install save\n\n## Example\n\n```js\n\nvar save = require('save')\n  , s = save('person')\n\ns.on('create', function() {\n  console.log('New person created!')\n})\n\ns.create({ name: 'Dom' }, function(err, person) {\n  // Outputs { name: 'Dom', _id: 1 }\n  console.log(person)\n})\n\n```\n\n## Usage\n\n```js\nvar save = require('save')\n```\n\n### var s = save(name, [options])\nSave by default returns an in memory engine which means you can unit test your models independently from your database. `name` is the name of your model.\n\nPossible options are:\n\n* `idProperty`. Defaults to `_id` for mongodb\n* `logger`. Defaults to console logging: `{ info: console.info, verbose: console.info }`\n* `engine`. Persistence engine to use, defaults to memory engine: `require(./memory-engine)`\n\n### s.create(object, [cb])\nCreates a new entity.\n`cb` called with `cb(err, savedObject)`.\n\n### s.read(id, [cb])\nReads a single entity with an `idProperty` of `id`.\n`cb` called with `cb(err, readObject)`.\n\n### s.update(object, overwrite, [cb])\nUpdates a single entity. Optionally overwrites the entire entity, by default just extends it with the new values.\n`cb` called with `cb(err, readObject)`.\n\n### s.delete(id, [cb])\nDeletes one entity.\nReturns an error if the object can not be found.\n`cb` called with `cb(err)`.\n\n### s.deleteMany(query, [cb])\nDeletes entities based on a query.\nPerforms a find by query, then calls delete for each item returned\nReturns an error if no items match the query.\n`cb` called with `cb(err)`.\n\n### s.find(query, options, cb)\nPerforms a find on the data.\n`cb` called with `cb(err, foundObjectsArray)`.\n\n### s.findOne(query, options, cb)\nPerforms a find on the data and limits the result set to 1.\n`cb` called with `cb(err, foundObject)`.\n\n### s.count(query, cb)\nPerforms a count by query.\n`cb` called with `cb(err, count)`.\n\n### s.idProperty\nProvides access to the `idProperty`. Mostly used for testing.\n\n## Events\n\n### s.on('create', cb)\nThis event fires with `cb(object)` where `object` is the item that will be created.\n\n### s.on('afterCreate', cb)\nThis event fires with `cb(object)` where `object` is the item that has been created.\n\n### s.on('update', cb)\nThis event fires with `cb(object, overwrite)` where `object` is the item that will be updated and `overwrite` is whether the object is to be overwritten or extended.\n\n### s.on('afterUpdate', cb)\nThis event fires with `cb(object, overwrite)` where `object` is the item that has been updated and `overwrite` is whether the object is to be overwritten or extended.\n\n### s.on('delete', cb)\nThis event fires with `cb(id)` where `id` is the item that will be deleted.\n\n### s.on('afterDelete', cb)\nThis event fires with `cb(id)` where `id` is the item that has been deleted.\n\n### s.on('deleteMany', cb)\nThis event fires with `cb(query)` where `query` is the query used to `deleteMany`.\n\n### s.on('afterDeleteMany', cb)\nThis event fires with `cb(query)` where `query` is the query that has used `deleteMany`.\n\n### s.on('read', cb)\nThis event fires with `cb(id)` where `id` is the item that has been read.\n\n### s.on('find', cb)\nThis event fires with `cb(query)` where `query` is the query used to `find`.\n\n### s.on('findOne', cb)\nThis event fires with `cb(query)` where `query` is the query used to `findOne`.\n\n### s.on('count', cb)\nThis event fires with `cb(query)` where `query` is the query used to `count`.\n\n### s.on('error', cb)\nThis event fires with `cb(err)` where `err` is any error that may have occured.\n\n## Credits\n[Paul Serby](https://github.com/serby/) follow me on twitter [@serby](http://twitter.com/serby)\n\n[Dom Harrington](https://github.com/domharrington/)\n\n## Licence\nLicenced under the [New BSD License](http://opensource.org/licenses/bsd-license.php)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/serby/save.git"
  },
  "scripts": {
    "lint": "eslint -f unix .",
    "prepublish": "npm test && npm prune",
    "pretest": "npm run-script lint",
    "prettier": "prettier --write '**/*.js'",
    "test": "nyc mocha -- --recursive -R spec -r should"
  },
  "tags": [
    "ORM",
    "data",
    "database",
    "it's not an ORM"
  ],
  "version": "2.9.0"
}
